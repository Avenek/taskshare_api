// <auto-generated />
using System;
using API_project_system.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_project_system.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20240325193329_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API_project_system.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_approval_statuses");

                    b.ToTable("approval_statuses", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deadline_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_assigments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_assigments_course_id");

                    b.ToTable("assigments", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("icon_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_courses_owner_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<string>("StudentComment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("student_comment");

                    b.Property<DateTime>("SubmissionDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("submission_date_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_submissions_assignment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_submissions_user_id");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.SubmissionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_path");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("submission_id");

                    b.HasKey("Id")
                        .HasName("pk_submission_files");

                    b.HasIndex("SubmissionId")
                        .HasDatabaseName("ix_submission_files_submission_id");

                    b.ToTable("submission_files", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_users_status_id");

                    b.HasIndex(new[] { "RoleId" }, "user_ibfk_1")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("courses_enrolled_users", b =>
                {
                    b.Property<int>("EnrolledCoursesId")
                        .HasColumnType("int")
                        .HasColumnName("enrolled_courses_id");

                    b.Property<int>("EnrolledUsersId")
                        .HasColumnType("int")
                        .HasColumnName("enrolled_users_id");

                    b.HasKey("EnrolledCoursesId", "EnrolledUsersId")
                        .HasName("pk_courses_enrolled_users");

                    b.HasIndex("EnrolledUsersId")
                        .HasDatabaseName("ix_courses_enrolled_users_enrolled_users_id");

                    b.ToTable("courses_enrolled_users", (string)null);
                });

            modelBuilder.Entity("courses_pending_users", b =>
                {
                    b.Property<int>("PendingCoursesId")
                        .HasColumnType("int")
                        .HasColumnName("pending_courses_id");

                    b.Property<int>("PendingUsersId")
                        .HasColumnType("int")
                        .HasColumnName("pending_users_id");

                    b.HasKey("PendingCoursesId", "PendingUsersId")
                        .HasName("pk_courses_pending_users");

                    b.HasIndex("PendingUsersId")
                        .HasDatabaseName("ix_courses_pending_users_pending_users_id");

                    b.ToTable("courses_pending_users", (string)null);
                });

            modelBuilder.Entity("API_project_system.Entities.Assignment", b =>
                {
                    b.HasOne("API_project_system.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assigments_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("API_project_system.Entities.Course", b =>
                {
                    b.HasOne("API_project_system.Entities.User", "Owner")
                        .WithMany("OwnedCourses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API_project_system.Entities.Submission", b =>
                {
                    b.HasOne("API_project_system.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_id");

                    b.HasOne("API_project_system.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_users_user_id");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_project_system.Entities.SubmissionFile", b =>
                {
                    b.HasOne("API_project_system.Entities.Submission", "Submission")
                        .WithMany("Files")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submission_files_submissions_submission_id");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("API_project_system.Entities.User", b =>
                {
                    b.HasOne("API_project_system.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_1");

                    b.HasOne("API_project_system.Entities.ApprovalStatus", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_2");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("courses_enrolled_users", b =>
                {
                    b.HasOne("API_project_system.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("EnrolledCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_enrolled_users_courses_enrolled_courses_id");

                    b.HasOne("API_project_system.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("EnrolledUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_enrolled_users_users_enrolled_users_id");
                });

            modelBuilder.Entity("courses_pending_users", b =>
                {
                    b.HasOne("API_project_system.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("PendingCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_pending_users_courses_pending_courses_id");

                    b.HasOne("API_project_system.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PendingUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_pending_users_users_pending_users_id");
                });

            modelBuilder.Entity("API_project_system.Entities.ApprovalStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API_project_system.Entities.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("API_project_system.Entities.Course", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("API_project_system.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API_project_system.Entities.Submission", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("API_project_system.Entities.User", b =>
                {
                    b.Navigation("OwnedCourses");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
